var result := 
  mm!EClass.allInstances().exists(c|c.matches_HSM_StateMachine(Set{}, false, true))
  and
  mm!EClass.allInstances().exists(c|c.matches_HSM_RegularState(Set{}, false, true))
  and
  mm!EClass.allInstances().exists(c|c.matches_HSM_InitialState(Set{}, false, true))
  and
  mm!EClass.allInstances().exists(c|c.matches_HSM_Transition(Set{}, false, true))
  and
  mm!EClass.allInstances().exists(c|c.matches_HSM_CompositeState(Set{}, false, true))
  and
  mm!EClass.allInstances().exists(c|c.matches_HSM_AbstractState(Set{}, false, true))
;


if ( not mm!EClass.allInstances().exists(c|c.matches_HSM_StateMachine(Set{}, false, true)) ) {
"HSM_StateMachine".println("Cannot find match: ");
}
if ( not mm!EClass.allInstances().exists(c|c.matches_HSM_RegularState(Set{}, false, true)) ) {
"HSM_RegularState".println("Cannot find match: ");
}
if ( not mm!EClass.allInstances().exists(c|c.matches_HSM_InitialState(Set{}, false, true)) ) {
"HSM_InitialState".println("Cannot find match: ");
}
if ( not mm!EClass.allInstances().exists(c|c.matches_HSM_Transition(Set{}, false, true)) ) {
"HSM_Transition".println("Cannot find match: ");
}
if ( not mm!EClass.allInstances().exists(c|c.matches_HSM_CompositeState(Set{}, false, true)) ) {
"HSM_CompositeState".println("Cannot find match: ");
}
if ( not mm!EClass.allInstances().exists(c|c.matches_HSM_AbstractState(Set{}, false, true)) ) {
"HSM_AbstractState".println("Cannot find match: ");
}



operation EClass matches_HSM_StateMachine(visited : Set(EClass), ignoreName : Boolean, checkSubclasses : Boolean) : Boolean {
   var conforms := (self.name = 'HSM_StateMachine' or ignoreName) 
   and true

   and self.eAllSuperTypes->collect(f | f.name)->includesAll ( Set{} )
   and self.eAllSuperTypes->collect(f | f.name)->excludesAll ( Set{} )
   ;   
   
   // this is a hint for subsAllowed... when it is the source
 
   if ( checkSubclasses and not conforms ) {
   	  // check subtypes
   	  var subclasses := EClass.allInstances()->select(c | not c.isAbstract)->select(c | c.eAllSuperTypes->includes(self));
   	  conforms := self.isAbstract and subclasses.size() > 0 and subclasses->forAll(c | c.matches_HSM_StateMachine(visited, true, false));
   }
   
   return conforms;
}
operation EClass matches_HSM_RegularState(visited : Set(EClass), ignoreName : Boolean, checkSubclasses : Boolean) : Boolean {
   var conforms := (self.name = 'HSM_RegularState' or ignoreName) 
      and
   self.eAllStructuralFeatures.exists( f | f.name = 'name' 
                      
               ) and 
   self.eAllStructuralFeatures.exists( f | f.name = 'stateMachine' 
                      
               )   and true

   and self.eAllSuperTypes->collect(f | f.name)->includesAll ( Set{} )
   and self.eAllSuperTypes->collect(f | f.name)->excludesAll ( Set{} )
   ;   
   
   // this is a hint for subsAllowed... when it is the source
 
   if ( checkSubclasses and not conforms ) {
   	  // check subtypes
   	  var subclasses := EClass.allInstances()->select(c | not c.isAbstract)->select(c | c.eAllSuperTypes->includes(self));
   	  conforms := self.isAbstract and subclasses.size() > 0 and subclasses->forAll(c | c.matches_HSM_RegularState(visited, true, false));
   }
   
   return conforms;
}
operation EClass matches_HSM_InitialState(visited : Set(EClass), ignoreName : Boolean, checkSubclasses : Boolean) : Boolean {
   var conforms := (self.name = 'HSM_InitialState' or ignoreName) 
      and
   self.eAllStructuralFeatures.exists( f | f.name = 'compositeState' 
                      
               ) and 
   self.eAllStructuralFeatures.exists( f | f.name = 'stateMachine' 
                      
               ) and 
   self.eAllStructuralFeatures.exists( f | f.name = 'name' 
                      
               )   and true
     and ( 
       self.eAllReferences.exists( f | f.name = 'compositeState'     
            and f.eReferenceType.matches_HSM_CompositeState( visited.including(self), false, true )
		
         /* jesusc: removed cardinality checks here. Placed in the exists above to make sure that it is checked
            even if not feature type is given.
                      
                     */                                      
          )
		
		)

   and self.eAllSuperTypes->collect(f | f.name)->includesAll ( Set{} )
   and self.eAllSuperTypes->collect(f | f.name)->excludesAll ( Set{} )
   ;   
   
   // this is a hint for subsAllowed... when it is the source
 
   if ( checkSubclasses and not conforms ) {
   	  // check subtypes
   	  var subclasses := EClass.allInstances()->select(c | not c.isAbstract)->select(c | c.eAllSuperTypes->includes(self));
   	  conforms := self.isAbstract and subclasses.size() > 0 and subclasses->forAll(c | c.matches_HSM_InitialState(visited, true, false));
   }
   
   return conforms;
}
operation EClass matches_HSM_Transition(visited : Set(EClass), ignoreName : Boolean, checkSubclasses : Boolean) : Boolean {
   var conforms := (self.name = 'HSM_Transition' or ignoreName) 
      and
   self.eAllStructuralFeatures.exists( f | f.name = 'source' 
                      
               ) and 
   self.eAllStructuralFeatures.exists( f | f.name = 'target' 
                      
               ) and 
   self.eAllStructuralFeatures.exists( f | f.name = 'label' 
                      
               ) and 
   self.eAllStructuralFeatures.exists( f | f.name = 'stateMachine' 
                      
               )   and true
     and ( 
       self.eAllReferences.exists( f | f.name = 'source'     
            and f.eReferenceType.matches_HSM_CompositeState( visited.including(self), false, true )
		
         /* jesusc: removed cardinality checks here. Placed in the exists above to make sure that it is checked
            even if not feature type is given.
                      
                     */                                      
            and f.eReferenceType.matches_HSM_AbstractState( visited.including(self), false, true )
		
         /* jesusc: removed cardinality checks here. Placed in the exists above to make sure that it is checked
            even if not feature type is given.
                      
                     */                                      
          )
		
		)
     and ( 
       self.eAllReferences.exists( f | f.name = 'target'     
            and f.eReferenceType.matches_HSM_AbstractState( visited.including(self), false, true )
		
         /* jesusc: removed cardinality checks here. Placed in the exists above to make sure that it is checked
            even if not feature type is given.
                      
                     */                                      
            and f.eReferenceType.matches_HSM_CompositeState( visited.including(self), false, true )
		
         /* jesusc: removed cardinality checks here. Placed in the exists above to make sure that it is checked
            even if not feature type is given.
                      
                     */                                      
          )
		
		)

   and self.eAllSuperTypes->collect(f | f.name)->includesAll ( Set{} )
   and self.eAllSuperTypes->collect(f | f.name)->excludesAll ( Set{} )
   ;   
   
   // this is a hint for subsAllowed... when it is the source
 
   if ( checkSubclasses and not conforms ) {
   	  // check subtypes
   	  var subclasses := EClass.allInstances()->select(c | not c.isAbstract)->select(c | c.eAllSuperTypes->includes(self));
   	  conforms := self.isAbstract and subclasses.size() > 0 and subclasses->forAll(c | c.matches_HSM_Transition(visited, true, false));
   }
   
   return conforms;
}
operation EClass matches_HSM_CompositeState(visited : Set(EClass), ignoreName : Boolean, checkSubclasses : Boolean) : Boolean {
   var conforms := (self.name = 'HSM_CompositeState' or ignoreName) 
   and true

   and self.eAllSuperTypes->collect(f | f.name)->includesAll ( Set{} )
   and self.eAllSuperTypes->collect(f | f.name)->excludesAll ( Set{} )
   ;   
   
   // this is a hint for subsAllowed... when it is the source
 
   if ( checkSubclasses and not conforms ) {
   	  // check subtypes
   	  var subclasses := EClass.allInstances()->select(c | not c.isAbstract)->select(c | c.eAllSuperTypes->includes(self));
   	  conforms := self.isAbstract and subclasses.size() > 0 and subclasses->forAll(c | c.matches_HSM_CompositeState(visited, true, false));
   }
   
   return conforms;
}
operation EClass matches_HSM_AbstractState(visited : Set(EClass), ignoreName : Boolean, checkSubclasses : Boolean) : Boolean {
   var conforms := (self.name = 'HSM_AbstractState' or ignoreName) 
      and
   self.eAllStructuralFeatures.exists( f | f.name = 'compositeState' 
                      
               )   and true
     and ( 
       self.eAllReferences.exists( f | f.name = 'compositeState'     
            and f.eReferenceType.matches_HSM_CompositeState( visited.including(self), false, true )
		
         /* jesusc: removed cardinality checks here. Placed in the exists above to make sure that it is checked
            even if not feature type is given.
                      
                     */                                      
          )
		
		)

   and self.eAllSuperTypes->collect(f | f.name)->includesAll ( Set{} )
   and self.eAllSuperTypes->collect(f | f.name)->excludesAll ( Set{} )
   ;   
   
   // this is a hint for subsAllowed... when it is the source
 
   if ( checkSubclasses and not conforms ) {
   	  // check subtypes
   	  var subclasses := EClass.allInstances()->select(c | not c.isAbstract)->select(c | c.eAllSuperTypes->includes(self));
   	  conforms := self.isAbstract and subclasses.size() > 0 and subclasses->forAll(c | c.matches_HSM_AbstractState(visited, true, false));
   }
   
   return conforms;
}

operation EStructuralFeature satMinCardinality(val: Integer, less: Boolean, more: Boolean) : Boolean {
     if (less) return self.lowerBound <= val;
     if (more) return self.lowerBound >= val;
     return self.lowerBound = val;
}

operation EStructuralFeature satMaxCardinality(val: Integer, less: Boolean, more: Boolean) : Boolean {
     if (less) return self.upperBound <= val;
     if (more) return self.upperBound >= val;
     return self.upperBound = val;
}

operation EStructuralFeature satMaxCardinalityMany(ordered: Integer, duplicated: Integer) : Boolean {
     var satisfiedOrdered : Boolean := true;
     if (ordered=0) satisfiedOrdered := not self.ordered;
     if (ordered=1) satisfiedOrdered := self.ordered;
     
     var satisfiedUnique : Boolean = true;
     if (duplicated=0) satisfiedUnique := self.unique;
     if (duplicated=1) satisfiedUnique := not self.unique;
      
     return satisfiedOrdered and satisfiedUnique;
}

operation EAttribute isProcessedOpposite() : Boolean {
	return false;
}

operation EReference isProcessedOpposite() : Boolean {
   if (not self.eOpposite.isDefined()) {
   	  return false;
   }
   else {
       return Set{ 'name' ,  'stateMachine' ,  'compositeState' ,  'stateMachine' ,  'name' ,  'source' ,  'target' ,  'label' ,  'stateMachine' ,  'compositeState' }.contains(self.eOpposite.name);
       // This is not accurate, as we should test that the reference is actually matched by opposite, not just check the name       
   }
}

